<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tinychange&#39;s blog</title>
  <subtitle>tiny change makes a better world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-05-13T10:04:28.500Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>tinychange</name>
    <email>meng_wen@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>volatile关键字解析(转)</title>
    <link href="http://yoursite.com/2016/05/13/volatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%A7%A3%E6%9E%90-%E8%BD%AC/"/>
    <id>http://yoursite.com/2016/05/13/volatile关键字解析-转/</id>
    <published>2016-05-13T09:59:01.000Z</published>
    <updated>2016-05-13T10:04:28.500Z</updated>
    
    <content type="html">&lt;p&gt;volatile这个关键字可能很多朋友都听说过，或许也都用过。在Java 5之前，它是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在Java 5之后，volatile关键字才得以重获生机。&lt;br&gt;&lt;a href=&quot;#jump&quot;&gt;说明文字&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后标记要跳转到什么位置即可：&lt;br&gt;&lt;span id=&quot;jump&quot;&gt;跳转到这里：&lt;/span&gt;&lt;br&gt;　　volatile关键字虽然从字面上理解起来比较简单，但是要用好不是一件容易的事情。由于volatile关键字是与Java的内存模型有关的，因此在讲述volatile关键之前，我们先来了解一下与内存模型相关的概念和知识，然后分析了volatile关键字的实现原理，最后给出了几个使用volatile关键字的场景。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下是本文的目录大纲：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; &lt;a href=&quot;#block1&quot;&gt; 一.内存模型的相关概念&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#block2&quot;&gt; 二.并发编程中的三个概念&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#block3&quot;&gt; 三.Java内存模型&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#block4&quot;&gt; 四.深入剖析volatile关键字&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#block5&quot;&gt; 五.使用volatile关键字的场景&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;若有不正之处请多多谅解，并欢迎批评指正。&lt;/p&gt;
&lt;p&gt;请尊重作者劳动成果，转载请标明原文链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/p/3920373.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/dolphin0520/p/3920373.html&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;block1&quot;&gt;一.内存模型的相关概念&lt;/h5&gt;

&lt;p&gt;　　大家都知道，计算机在执行程序时，每条指令都是在CPU中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于CPU执行速度很快，而从内存读取数据和向内存写入数据的过程跟CPU执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在CPU里面就有了高速缓存。&lt;/p&gt;
&lt;p&gt;　　也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到CPU的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。举个简单的例子，比如下面的这段代码：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i = i + 1;&lt;/code&gt;&lt;br&gt; 　　当线程执行这个语句时，会先从主存当中读取i的值，然后复制一份到高速缓存当中，然后CPU执行指令对i进行加1操作，然后将数据写入高速缓存，最后将高速缓存中i最新的值刷新到主存当中。&lt;/p&gt;
&lt;p&gt;　　这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有问题了。在多核CPU中，每条线程可能运行于不同的CPU中，因此每个线程运行时有自己的高速缓存（对单核CPU来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）。本文我们以多核CPU为例。&lt;/p&gt;
&lt;p&gt;　　比如同时有2个线程执行这段代码，假如初始时i的值为0，那么我们希望两个线程执行完之后i的值变为2。但是事实会是这样吗？&lt;/p&gt;
&lt;p&gt;　　可能存在下面一种情况：初始时，两个线程分别读取i的值存入各自所在的CPU的高速缓存当中，然后线程1进行加1操作，然后把i的最新值1写入到内存。此时线程2的高速缓存当中i的值还是0，进行加1操作之后，i的值为1，然后线程2把i的值写入内存。&lt;/p&gt;
&lt;p&gt;　　最终结果i的值是1，而不是2。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。&lt;/p&gt;
&lt;p&gt;　　也就是说，如果一个变量在多个CPU中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题。&lt;/p&gt;
&lt;p&gt;　　为了解决缓存不一致性问题，通常来说有以下2种解决方法：&lt;/p&gt;
&lt;p&gt;　　1）通过在总线加LOCK#锁的方式&lt;/p&gt;
&lt;p&gt;　　2）通过缓存一致性协议&lt;/p&gt;
&lt;p&gt;　　这2种方式都是硬件层面上提供的方式。&lt;/p&gt;
&lt;p&gt;　　在早期的CPU当中，是通过在总线上加LOCK#锁的形式来解决缓存不一致的问题。因为CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK#锁的话，也就是说阻塞了其他CPU对其他部件访问（如内存），从而使得只能有一个CPU能使用这个变量的内存。比如上面例子中 如果一个线程在执行 i = i +1，如果在执行这段代码的过程中，在总线上发出了LCOK#锁的信号，那么只有等待这段代码完全执行完毕之后，其他CPU才能从变量i所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。&lt;/p&gt;
&lt;p&gt;　　但是上面的方式会有一个问题，由于在锁住总线期间，其他CPU无法访问内存，导致效率低下。&lt;/p&gt;
&lt;p&gt;　　所以就出现了缓存一致性协议。最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1986284-c3adb2957c173eac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;BJ~IW~$D1LIUS$O]@AQV2GB.png&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;block2&quot;&gt;二.并发编程中的三个概念&lt;/h5&gt;&lt;br&gt;　　在并发编程中，我们通常会遇到以下三个问题：原子性问题，可见性问题，有序性问题。我们先看具体看一下这三个概念：&lt;br&gt;&lt;strong&gt;1.原子性&lt;/strong&gt;&lt;br&gt;　　原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。&lt;br&gt;　　一个很经典的例子就是银行账户转账问题：&lt;br&gt;　　比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。&lt;br&gt;　　试想一下，如果这2个操作不具备原子性，会造成什么样的后果。假如从账户A减去1000元之后，操作突然中止。然后又从B取出了500元，取出500元之后，再执行 往账户B加上1000元 的操作。这样就会导致账户A虽然减去了1000元，但是账户B没有收到这个转过来的1000元。&lt;br&gt;　　所以这2个操作必须要具备原子性才能保证不出现一些意外的问题。&lt;br&gt;　　同样地反映到并发编程中会出现什么结果呢？&lt;br&gt;　　举个最简单的例子，大家想一下假如为一个32位的变量赋值过程不具备原子性的话，会发生什么后果？&lt;br&gt;&lt;code&gt;i = 9;&lt;/code&gt;&lt;br&gt;&lt;br&gt; 　　假若一个线程执行到这个语句时，我暂且假设为一个32位的变量赋值包括两个过程：为低16位赋值，为高16位赋值。&lt;br&gt;　　那么就可能发生一种情况：当将低16位数值写入之后，突然被中断，而此时又有一个线程去读取i的值，那么读取到的就是错误的数据。&lt;br&gt;&lt;strong&gt;2.可见性&lt;/strong&gt;&lt;br&gt;　　可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。&lt;br&gt;　　举个简单的例子，看下面这段代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//线程1执行的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int i = 0;i = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//线程2执行的代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;j = i;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt; 　　假若执行线程1的是CPU1，执行线程2的是CPU2。由上面的分析可知，当线程1执行 i =10这句时，会先把i的初始值加载到CPU1的高速缓存中，然后赋值为10，那么在CPU1的高速缓存当中i的值变为10了，却没有立即写入到主存当中。&lt;br&gt;　　此时线程2执行 j = i，它会先去主存读取i的值并加载到CPU2的缓存当中，注意此时内存当中i的值还是0，那么就会使得j的值为0，而不是10.&lt;br&gt;　　这就是可见性问题，线程1对变量i修改了之后，线程2没有立即看到线程1修改的值。&lt;br&gt;&lt;strong&gt;3.有序性&lt;/strong&gt;&lt;br&gt;　　有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int i = 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boolean flag = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;i = 1; //语句1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flag = true; //语句2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt; 　　上面代码定义了一个int型变量，定义了一个boolean类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗？不一定，为什么呢？这里可能会发生指令重排序（Instruction Reorder）。&lt;br&gt;　　下面解释一下什么是指令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。&lt;br&gt;　　比如上面的代码中，语句1和语句2谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句2先执行而语句1后执行。&lt;br&gt;　　但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int a = 10; //语句1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int r = 2; //语句2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = a + 3; //语句3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;r = a*a;	 //语句4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;这段代码有4个语句，那么可能的一个执行顺序是：&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1986284-92904ccaadef858b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;WB3L%S5DEIBDNB0KFEZ8J)P.png&quot;&gt;&lt;br&gt;　　&lt;br&gt;　　那么可不可能是这个执行顺序呢： 语句2   语句1    语句4   语句3&lt;br&gt;　　不可能，因为处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么处理器会保证Instruction 1会在Instruction 2之前执行。&lt;br&gt;　　虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？下面看一个例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//线程1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context = loadContext(); //语句1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inited = true; //语句2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//线程2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while(!inited )&amp;#123; sleep() &amp;#125;doSomethingwithconfig(context);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt; 　　上面代码中，由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。&lt;br&gt; 　　从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。&lt;br&gt;　　也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。&lt;br&gt;&lt;br&gt;&lt;h5 id=&quot;block3&quot;&gt;三.Java内存模型&lt;/h5&gt;&lt;br&gt;　　在前面谈到了一些关于内存模型以及并发编程中可能会出现的一些问题。下面我们来看一下Java内存模型，研究一下Java内存模型为我们提供了哪些保证以及在java中提供了哪些方法和机制来让我们在进行多线程编程时能够保证程序执行的正确性。&lt;br&gt;　　在Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。那么Java内存模型规定了哪些东西呢，它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在java内存模型中，也会存在缓存一致性问题和指令重排序的问题。&lt;br&gt;　　Java内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。&lt;br&gt;　　举个简单的例子：在java中，执行下面这个语句：&lt;br&gt;&lt;code&gt;i = 10;&lt;/code&gt;&lt;br&gt;&lt;br&gt; 　　执行线程必须先在自己的工作线程中对变量i所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值10写入主存当中。&lt;br&gt;　　那么Java语言 本身对 原子性、可见性以及有序性提供了哪些保证呢？&lt;br&gt;&lt;strong&gt;1.原子性&lt;/strong&gt;&lt;br&gt;　　在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。&lt;br&gt;　　上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子i：&lt;br&gt;　　请分析以下哪些操作是原子性操作：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x = 10; //语句1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y = x; //语句2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x++; //语句3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = x + 1; //语句4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt; 　　咋一看，有些朋友可能会说上面的4个语句中的操作都是原子性操作。其实只有语句1是原子性操作，其他三个语句都不是原子性操作。&lt;br&gt;　　语句1是直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中。&lt;br&gt;　　语句2实际上包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。&lt;br&gt;　　同样的，x++和 x = x+1包括3个操作：读取x的值，进行加1操作，写入新的值。&lt;br&gt; 　　所以上面4个语句只有语句1的操作具备原子性。&lt;br&gt;　　也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。&lt;br&gt;　　不过这里有一点需要注意：在32位平台下，对64位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的JDK中，JVM已经保证对64位数据的读取和赋值也是原子性操作了。&lt;br&gt;　　从上面可以看出，Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。&lt;br&gt;&lt;strong&gt;2.可见性&lt;/strong&gt;&lt;br&gt;　　对于可见性，Java提供了volatile关键字来保证可见性。&lt;br&gt;　　当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。&lt;br&gt;　　而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。&lt;br&gt;　　另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。&lt;br&gt;&lt;strong&gt;3.有序性&lt;/strong&gt;&lt;br&gt;　　在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。&lt;br&gt;　　在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。&lt;br&gt;　　另外，Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。&lt;br&gt;&lt;br&gt;下面就来具体介绍下happens-before原则（先行发生原则）：&lt;br&gt;&lt;br&gt;&amp;gt; &lt;em&gt;程序次序规则&lt;/em&gt;：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作.&lt;br&gt;&lt;br&gt;&amp;gt;&lt;em&gt;锁定规则&lt;/em&gt;：一个unLock操作先行发生于后面对同一个锁额lock操作&lt;br&gt;&lt;br&gt;&amp;gt;&lt;em&gt;volatile变量规则&lt;/em&gt;：对一个变量的写操作先行发生于后面对这个变量的读操作&lt;br&gt;&lt;br&gt;&amp;gt;&lt;em&gt;传递规则&lt;/em&gt;：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C&lt;br&gt;&lt;br&gt;&amp;gt;&lt;em&gt;线程启动规则&lt;/em&gt;：Thread对象的start()方法先行发生于此线程的每个一个动作&lt;br&gt;&lt;br&gt;&amp;gt;&lt;em&gt;线程中断规则&lt;/em&gt;：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生&lt;br&gt;&lt;br&gt;&amp;gt;&lt;em&gt;线程终结规则&lt;/em&gt;：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行&lt;br&gt;&lt;br&gt;&amp;gt;&lt;em&gt;对象终结规则&lt;/em&gt;：一个对象的初始化完成先行发生于他的finalize()方法的开始&lt;br&gt;&lt;br&gt;　　这8条原则摘自《深入理解Java虚拟机》。&lt;br&gt;　　这8条规则中，前4条规则是比较重要的，后4条规则都是显而易见的。&lt;br&gt;　　下面我们来解释一下前4条规则：&lt;br&gt;　　对于程序次序规则来说，我的理解就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到“书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。&lt;br&gt;　　第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行lock操作。&lt;br&gt;　　第三条规则是一条比较重要的规则，也是后文将要重点讲述的内容。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。&lt;br&gt;　　第四条规则实际上就是体现happens-before原则具备传递性。&lt;br&gt;&lt;br&gt;&lt;h5 id=&quot;block4&quot;&gt;四.深入剖析volatile关键字&lt;/h5&gt;&lt;br&gt;　　在前面讲述了很多东西，其实都是为讲述volatile关键字作铺垫，那么接下来我们就进入主题。&lt;br&gt;&lt;strong&gt;1.volatile关键字的两层语义&lt;/strong&gt;&lt;br&gt;　　一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：&lt;br&gt;　　1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。&lt;br&gt;　　2）禁止进行指令重排序。&lt;br&gt;　　先看一段代码，假如线程1先执行，线程2后执行：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//线程1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;boolean stop = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while(!stop)&amp;#123;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doSomething();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;//&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;线程2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stop = true;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt; 　　这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？即一定会将线程中断么？不一定，也许在大多数时候，这个代码能够把线程中断，但是也有可能会导致无法中断线程（虽然这个可能性很小，但是只要一旦发生这种情况就会造成死循环了）。&lt;br&gt;　　下面解释一下这段代码为何有可能导致无法中断线程。在前面已经解释过，每个线程在运行过程中都有自己的工作内存，那么线程1在运行的时候，会将stop变量的值拷贝一份放在自己的工作内存当中。&lt;br&gt;　　那么当线程2更改了stop变量的值之后，但是还没来得及写入主存当中，线程2转去做其他事情了，那么线程1由于不知道线程2对stop变量的更改，因此还会一直循环下去。&lt;br&gt;　　但是用volatile修饰之后就变得不一样了：&lt;br&gt;　　第一：使用volatile关键字会强制将修改的值立即写入主存；&lt;br&gt;　　第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；&lt;br&gt;　　第三：由于线程1的工作内存中缓存变量stop的缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。&lt;br&gt;　　那么在线程2修改stop值时（当然这里包括2个操作，修改线程2工作内存中的值，然后将修改后的值写入内存），会使得线程1的工作内存中缓存变量stop的缓存行无效，然后线程1读取时，发现自己的缓存行无效，它会等待缓存行对应的主存地址被更新之后，然后去对应的主存读取最新的值。&lt;br&gt;　　那么线程1读取到的就是最新的正确的值。&lt;br&gt;&lt;strong&gt;2.volatile保证原子性吗？&lt;/strong&gt;&lt;br&gt;　　从上面知道volatile关键字保证了操作的可见性，但是volatile能保证对变量的操作是原子性吗？&lt;br&gt;　　下面看一个例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Test &amp;#123;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public volatile int inc = 0;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  public void increase() &amp;#123;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inc++;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static void main(String[] args) &amp;#123;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    final Test test = new Test();		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for(int i=0;i&amp;lt;10;i++)&amp;#123;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      new Thread()&amp;#123;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           public void run() &amp;#123;					&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 for(int j=0;j&amp;lt;1000;j++)          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 test.increase();				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;#125;;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &amp;#125;.start();		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;#125;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  while(Thread.activeCount()&amp;gt;1) //保证前面的线程都执行完			   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           Thread.yield();		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   System.out.println(test.inc);	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt; 　　大家想一下这段程序的输出结果是多少？也许有些朋友认为是10000。但是事实上运行它会发现每次运行结果都不一致，都是一个小于10000的数字。&lt;br&gt;　　可能有的朋友就会有疑问，不对啊，上面是对变量inc进行自增操作，由于volatile保证了可见性，那么在每个线程中对inc自增完之后，在其他线程中都能看到修改后的值啊，所以有10个线程分别进行了1000次操作，那么最终inc的值应该是1000&lt;em&gt;10=10000。&lt;br&gt;　　这里面就有一个误区了，volatile关键字能保证可见性没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。&lt;br&gt;　　在前面已经提到过，自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。那么就是说自增操作的三个子操作可能会分割开执行，就有可能导致下面这种情况出现：&lt;br&gt;　　假如某个时刻变量inc的值为10，&lt;br&gt;　　线程1对变量进行自增操作，线程1先读取了变量inc的原始值，然后线程1被阻塞了；&lt;br&gt;　　然后线程2对变量进行自增操作，线程2也去读取变量inc的原始值，由于线程1只是对变量inc进行读取操作，而没有对变量进行修改操作，所以不会导致线程2的工作内存中缓存变量inc的缓存行无效，所以线程2会直接去主存读取inc的值，发现inc的值时10，然后进行加1操作，并把11写入工作内存，最后写入主存。&lt;br&gt;　　然后线程1接着进行加1操作，由于已经读取了inc的值，注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。&lt;br&gt;　　那么两个线程分别进行了一次自增操作后，inc只增加了1。&lt;br&gt;　　解释到这里，可能有朋友会有疑问，不对啊，前面不是保证一个变量在修改volatile变量时，会让缓存行无效吗？然后其他线程去读就会读到新的值，对，这个没错。这个就是上面的happens-before规则中的volatile变量规则，但是要注意，线程1对变量进行读取操作之后，被阻塞了的话，并没有对inc值进行修改。然后虽然volatile能保证线程2对变量inc的值读取是从内存中读取的，但是线程1没有进行修改，所以线程2根本就不会看到修改的值。&lt;br&gt;　　根源就在这里，自增操作不是原子性操作，而且volatile也无法保证对变量的任何操作都是原子性的。&lt;br&gt;　　把上面的代码改成以下任何一种都可以达到效果：&lt;br&gt;　　采用synchronized：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public  int inc = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public synchronized void increase() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inc++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final Test test = new Test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(int i=0;i&amp;lt;10;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            new Thread()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    for(int j=0;j&amp;lt;1000;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        test.increase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        while(Thread.activeCount()&amp;gt;1)  //保证前面的线程都执行完&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Thread.yield();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(test.inc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;采用Lock：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public  int inc = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Lock lock = new ReentrantLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public  void increase() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lock.lock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        try &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            inc++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; finally&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            lock.unlock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final Test test = new Test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(int i=0;i&amp;lt;10;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            new Thread()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    for(int j=0;j&amp;lt;1000;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        test.increase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        while(Thread.activeCount()&amp;gt;1)  //保证前面的线程都执行完&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Thread.yield();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(test.inc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;采用AtomicInteger：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Test &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public  AtomicInteger inc = new AtomicInteger();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public  void increase() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inc.getAndIncrement();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        final Test test = new Test();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(int i=0;i&amp;lt;10;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            new Thread()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    for(int j=0;j&amp;lt;1000;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        test.increase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;.start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        while(Thread.activeCount()&amp;gt;1)  //保证前面的线程都执行完&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Thread.yield();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(test.inc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;在java 1.5的java.util.concurrent.atomic包下提供了一些原子操作类，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。atomic是利用CAS来实现原子性操作的（Compare And Swap），CAS实际上是利用处理器提供的CMPXCHG指令实现的，而处理器执行CMPXCHG指令是一个原子性操作。&lt;br&gt;&lt;strong&gt;3.volatile能保证有序性吗？&lt;/strong&gt;&lt;br&gt;　　在前面提到volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。&lt;br&gt;　　volatile关键字禁止指令重排序有两层意思：&lt;br&gt;　　1）当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；&lt;br&gt;　　2）在进行指令优化时，不能将在对volatile变量访问的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。&lt;br&gt;　　可能上面说的比较绕，举个简单的例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//x、y为非volatile变量&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//flag为volatile变量 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = 2;        //语句1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y = 0;        //语句2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flag = true;  //语句3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = 4;         //语句4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;y = -1;       //语句5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;由于flag变量为volatile变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。&lt;br&gt;&lt;br&gt;　　并且volatile关键字能保证，执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。&lt;br&gt;&lt;br&gt;　　那么我们回到前面举的一个例子：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//线程1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context = loadContext();   //语句1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inited = true;             //语句2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//线程2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while(!inited )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sleep() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doSomethingwithconfig(context);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;&lt;br&gt;　前面举这个例子的时候，提到有可能语句2会在语句1之前执行，那么久可能导致context还没被初始化，而线程2中就使用未初始化的context去进行操作，导致程序出错。&lt;br&gt;　　这里如果用volatile关键字对inited变量进行修饰，就不会出现这种问题了，因为当执行到语句2时，必定能保证context已经初始化完毕。&lt;br&gt;&lt;em&gt;*4.volatile的原理和实现机制&lt;/em&gt;&lt;/em&gt;&lt;br&gt;　　前面讲述了源于volatile关键字的一些使用，下面我们来探讨一下volatile到底如何保证可见性和禁止指令重排序的。&lt;br&gt;　　下面这段话摘自《深入理解Java虚拟机》：&lt;br&gt;　　“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”&lt;br&gt;　　lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：&lt;br&gt;　　1）它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；&lt;br&gt;　　2）它会强制将对缓存的修改操作立即写入主存；&lt;br&gt;　　3）如果是写操作，它会导致其他CPU中对应的缓存行无效。&lt;br&gt;&lt;br&gt;&lt;h5 id=&quot;block5&quot;&gt;五.使用volatile关键字的场景&lt;/h5&gt;

&lt;p&gt;　　synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。通常来说，使用volatile必须具备以下2个条件：&lt;/p&gt;
&lt;p&gt;　　1）对变量的写操作不依赖于当前值&lt;/p&gt;
&lt;p&gt;　　2）该变量没有包含在具有其他变量的不变式中&lt;/p&gt;
&lt;p&gt;　　实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。&lt;/p&gt;
&lt;p&gt;　　事实上，我的理解就是上面的2个条件需要保证操作是原子性操作，才能保证使用volatile关键字的程序在并发时能够正确执行。&lt;/p&gt;
&lt;p&gt;　　下面列举几个Java中使用volatile的几个场景。&lt;br&gt;&lt;strong&gt;1.状态标记量&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;volatile boolean flag = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while(!flag)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	doSomething();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public void setFlag() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	flag = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;volatile boolean inited = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//线程1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;context = loadContext();   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inited = true;             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//线程2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while(!inited )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sleep() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doSomethingwithconfig(context);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.double check&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Singleton&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private volatile static Singleton instance = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private Singleton() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public static Singleton getInstance() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if(instance==null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			synchronized (Singleton.class) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				if(instance==null)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					instance = new Singleton();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;至于为何需要这么写请参考：&lt;br&gt;　　《Java 中的双重检查（Double-Check）》&lt;a href=&quot;http://blog.csdn.net/dl88250/article/details/5439024&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/dl88250/article/details/5439024&lt;/a&gt;&lt;br&gt;　　和&lt;a href=&quot;http://www.iteye.com/topic/652440&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.iteye.com/topic/652440&lt;/a&gt;&lt;br&gt;　　参考资料：&lt;br&gt;　　《Java编程思想》&lt;br&gt;　　《深入理解Java虚拟机》&lt;br&gt;　　&lt;a href=&quot;http://jiangzhengjun.iteye.com/blog/652532&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jiangzhengjun.iteye.com/blog/652532&lt;/a&gt;&lt;br&gt;　　&lt;a href=&quot;http://blog.sina.com.cn/s/blog_7bee8dd50101fu8n.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.sina.com.cn/s/blog_7bee8dd50101fu8n.html&lt;/a&gt;&lt;br&gt;　　&lt;a href=&quot;http://ifeve.com/volatile/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ifeve.com/volatile/&lt;/a&gt;&lt;br&gt;　　&lt;a href=&quot;http://blog.csdn.net/ccit0519/article/details/11241403&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/ccit0519/article/details/11241403&lt;/a&gt;&lt;br&gt;　　&lt;a href=&quot;http://blog.csdn.net/ns_code/article/details/17101369&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/ns_code/article/details/17101369&lt;/a&gt;&lt;br&gt;　　&lt;a href=&quot;http://www.cnblogs.com/kevinwu/archive/2012/05/02/2479464.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/kevinwu/archive/2012/05/02/2479464.html&lt;/a&gt;&lt;br&gt;　　&lt;a href=&quot;http://www.cppblog.com/elva/archive/2011/01/21/139019.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cppblog.com/elva/archive/2011/01/21/139019.html&lt;/a&gt;&lt;br&gt;　　&lt;a href=&quot;http://ifeve.com/volatile-array-visiblity/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ifeve.com/volatile-array-visiblity/&lt;/a&gt;&lt;br&gt;　　&lt;a href=&quot;http://www.bdqn.cn/news/201312/12579.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.bdqn.cn/news/201312/12579.shtml&lt;/a&gt;&lt;br&gt;　　&lt;a href=&quot;http://exploer.blog.51cto.com/7123589/1193399&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://exploer.blog.51cto.com/7123589/1193399&lt;/a&gt;&lt;br&gt;　　&lt;a href=&quot;http://www.cnblogs.com/Mainz/p/3556430.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/Mainz/p/3556430.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者：&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;海子&lt;/a&gt;&lt;br&gt;出处：&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/dolphin0520/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本博客中未标明转载的文章归作者&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;海子&lt;/a&gt;和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;volatile这个关键字可能很多朋友都听说过，或许也都用过。在Java 5之前，它是一个备受争议的关键字，因为在程序中使用它往往会导致出人意料的结果。在Java 5之后，volatile关键字才得以重获生机。&lt;br&gt;&lt;a href=&quot;#jump&quot;&gt;说明文字&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java多线程" scheme="http://yoursite.com/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>test2</title>
    <link href="http://yoursite.com/2016/05/05/test2/"/>
    <id>http://yoursite.com/2016/05/05/test2/</id>
    <published>2016-05-05T03:01:38.000Z</published>
    <updated>2016-05-05T03:02:17.911Z</updated>
    
    <content type="html">&lt;p&gt;I’m a test &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I’m a test &lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>start learn</title>
    <link href="http://yoursite.com/2016/05/04/start-learn/"/>
    <id>http://yoursite.com/2016/05/04/start-learn/</id>
    <published>2016-05-04T01:21:47.000Z</published>
    <updated>2016-05-04T01:55:54.933Z</updated>
    
    <content type="html">&lt;h2 id=&quot;最近的计划（2016-5-4-–-2016年底）&quot;&gt;&lt;a href=&quot;#最近的计划（2016-5-4-–-2016年底）&quot; class=&quot;headerlink&quot; title=&quot;最近的计划（2016-5-4 – 2016年底）&quot;&gt;&lt;/a&gt;最近的计划（2016-5-4 – 2016年底）&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;最近工作比较清闲，所以决定开始学习下android平台的开发，接下来会不定期的对学习过程中遇到的问题

进行一些总结，一是可以当作学习笔记供自己复习，二来也分享给广大的android 爱好者，笔者也是小白一

名，掌握一些java基础还有一些常用的框架，相信和我一样处于这个时期的人还是蛮多的，借这个平台也希

望大家共同分享，共同进步！（问题总结会发到另外的文章中，本文用于记录每天计划供自己观看）
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;计划（记录每天所学）&quot;&gt;&lt;a href=&quot;#计划（记录每天所学）&quot; class=&quot;headerlink&quot; title=&quot;计划（记录每天所学）&quot;&gt;&lt;/a&gt;计划（记录每天所学）&lt;/h4&gt;&lt;p&gt;开始这段时间的重点应该都会放在极客学院的 an’droid 视频教程上，有个职业路径图，选择android工程师后会显示学习&lt;br&gt;android 的一个学习体系，由简到难，是我能找到的最适合初学者学习的资料了，不过视频难免有所疏漏，有些&lt;br&gt;知识点一笔带过，对初学者来说还是需要再翻一下其他的资料来读。&lt;/p&gt;
&lt;p&gt;视频学习大概大概分为这几个阶段（109课程519个视频课时 90小时合计课程时长）&lt;/p&gt;
&lt;p&gt;#####附学习进度&lt;/p&gt;
&lt;p&gt;初级Android开发工程师 31课程 15小时26分&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--Java基础  100%

--Android环境搭建 100%

--Android基础知识  100% 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;中级Android开发工程师 28课程 38小时6分&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--用户界面    learning...

--系统功能

--数据存储
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;高级Android开发工程师 50课程 35小时47分 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--网络与通信

--混合编程 

--Android开源库

--Bmob后端云系列课程

--Android测试

--项目实战
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;面试指导    &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;最近的计划（2016-5-4-–-2016年底）&quot;&gt;&lt;a href=&quot;#最近的计划（2016-5-4-–-2016年底）&quot; class=&quot;headerlink&quot; title=&quot;最近的计划（2016-5-4 – 2016年底）&quot;&gt;&lt;/a&gt;最近的计划（2016-5-4
    
    </summary>
    
      <category term="plan" scheme="http://yoursite.com/categories/plan/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>first blog</title>
    <link href="http://yoursite.com/2016/05/03/first-blog/"/>
    <id>http://yoursite.com/2016/05/03/first-blog/</id>
    <published>2016-05-03T01:20:59.000Z</published>
    <updated>2016-05-03T01:22:13.368Z</updated>
    
    <content type="html">&lt;p&gt;this is my first blog for test,please wait.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;this is my first blog for test,please wait.&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
